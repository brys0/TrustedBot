plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.hidetake.ssh' version '2.10.1'
	id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.github.http-builder-ng.http-plugin" version "0.1.1"
    //id 'signing'
}

group = 'de.pheromir'
version = "1.0.3"
def projName = "TrustedBot"

repositories {
    maven { url 'https://jcenter.bintray.com' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
}

dependencies {
    implementation "net.dv8tion:JDA:4.2.0_171"
    implementation "com.jagrosh:jda-utilities:3.0.4"
    implementation "com.sedmelluq:lavaplayer:1.3.50"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "org.yaml:snakeyaml:1.24"
    implementation "com.google.api-client:google-api-client:1.23.0"
    implementation "org.projectlombok:lombok:1.18.0"
    implementation "com.google.apis:google-api-services-youtube:v3-rev198-1.23.0"
    implementation "com.konghq:unirest-java:3.8.00"
    implementation "mysql:mysql-connector-java:5.1.47"
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'de.pheromir.trustedbot.Main'
        )
    }
}

Properties props = new Properties()
try {
    props.load(new FileInputStream("$project.rootDir/private.properties"))
} catch (IOException ignored) {
    props.scp_user= "user"
    props.scp_pass = "pass"
    props.scp_host = "host"
    // CI will pass those
    props.mvn_user_fetch = System.getenv("MVN_USER")
    props.mvn_pass_fetch = System.getenv("MVN_PASS")
}

remotes {
    prod {
        host = "${props.scp_host}"
        port = 1933
        user = props.scp_user
        password = props.scp_pass
    }
}

//ssh.settings {
//    knownHosts = allowAnyHosts
//}

props.each { prop ->
    project.ext.set(prop.key, prop.value)
}

task renameJar(dependsOn: shadowJar, type: Copy) {
    from ('build/libs/')
    include "${projName}-$project.version-all.jar"
    destinationDir file('build/libs/')
    rename "${projName}-$project.version-all.jar", "${projName}.jar"
}

// Copy built jar into home/trustedbot/ (relative to ftp start directory)
task copyProd(dependsOn: renameJar) {
    doLast {
        ssh.run {
            session(remotes.prod) {
                put from: fileTree(dir: "$project.projectDir/build/libs", includes: ["${projName}.jar"]), into: "home/trustedbot/"
            }
        }
    }
}

// kill the bot (I dont have systemctl on my NAS, so i have to use a helper-script)
task killBot() {
    doLast {
        ssh.run {
            session(remotes.prod) {
                execute '/var/services/homes/Pheromir/bin/manage-trustedbot stop'
            }
        }
    }
}

// start the bot (I dont have systemctl on my NAS, so i have to use a helper-script)
task startBot() {
    doLast {
        ssh.run {
            session(remotes.prod) {
                execute '/var/services/homes/Pheromir/bin/manage-trustedbot start'
            }
        }
    }
}

// check if the but is running (I dont have systemctl on my NAS, so i have to use a helper-script)
task checkBot() {
    doLast {
        ssh.runInOrder {
            session(remotes.prod) {
                execute '/var/services/homes/Pheromir/bin/manage-trustedbot status'
            }
        }
    }
}

task uploadAndRestart() {
    dependsOn 'clean'
    dependsOn 'copyProd'
    dependsOn 'killBot'
    dependsOn 'startBot'
    dependsOn 'checkBot'
    tasks.findByName("copyProd").mustRunAfter("clean")
    tasks.findByName("killBot").mustRunAfter("copyProd")
    tasks.findByName("startBot").mustRunAfter("killBot")
    tasks.findByName("checkBot").mustRunAfter("startBot")
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava.options.encoding = 'UTF-8'

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${projName}"
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "${projName}"
                description = 'A Bot for Discord using JDA'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv("MVN_USER_PUBLISH")
                password = System.getenv("MVN_PASS_PUBLISH")
            }
            url "https://repo.cytherion.eu/artifactory/private/"
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

/*signing {
    sign publishing.publications.mavenJava
}*/

javadoc {
	options.encoding = 'UTF-8'
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
